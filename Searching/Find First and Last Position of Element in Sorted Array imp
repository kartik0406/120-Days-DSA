vector<int> searchRange(vector<int>& nums, int target) {
          vector<int>ans;
          int first=-1,last=-1;
          int st=0,en=nums.size()-1,mid;
          while(st<=en){
               mid=st+(en-st)/2;
              if((nums[mid]==target && mid==0)||(nums[mid]==target && ((mid!=0)&(nums[mid-1]!=target)))){
                  
                      first=mid;
                      break;
              }
              else if(nums[mid]<target)
                  st=mid+1;
              else
                  en=mid-1;
          }
        st=0,en=nums.size()-1;
        while(st<=en){
            mid=st+(en-st)/2;
            if((nums[mid]==target && mid==nums.size()-1)||(nums[mid]==target && ((mid<nums.size())&(nums[mid+1]!=target))))
            {
                last=mid;
                break;
            }
            else if(nums[mid]>target)
                en=mid-1;
            else
                st=mid+1;
        }
        
      //  cout<<first<<endl<<last;
        ans.push_back(first);
        ans.push_back(last);
        return ans;
    }

Question Link: https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/